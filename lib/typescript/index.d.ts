import TurboToastView from './TurboToastView';
import type { ToastConfig, ToastOptions } from './types';
export type { QueuedToast, QueueEvent, QueueStats, ToastAction, ToastConfig, ToastDuration, ToastOptions, ToastPosition, ToastType, } from './types';
export declare const show: (options: ToastOptions | string) => string;
export declare const hide: (id?: string) => void;
export declare const hideAll: () => void;
export declare const update: (id: string, options: Partial<ToastOptions>) => boolean;
export declare const configure: (options: ToastConfig) => void;
export declare const destroy: () => void;
export declare const isActive: (id: string) => boolean;
export declare const getActiveToasts: () => import("./types").QueuedToast[];
export declare const getQueuedToasts: () => import("./types").QueuedToast[];
export declare const getQueueStats: () => import("./types").QueueStats;
export declare const clearGroup: (group: string) => import("./types").QueuedToast[];
export declare const findByGroup: (group: string) => import("./types").QueuedToast[];
export declare const updateToast: (id: string, updates: Partial<ToastOptions>) => boolean;
export declare const reorderToast: (id: string, newPriority: number) => boolean;
export declare const pauseQueue: () => void;
export declare const resumeQueue: () => void;
export declare const getToastPosition: (id: string) => number | undefined;
export declare const success: (message: string, options?: Partial<ToastOptions>) => string;
export declare const error: (message: string, options?: Partial<ToastOptions>) => string;
export declare const warning: (message: string, options?: Partial<ToastOptions>) => string;
export declare const info: (message: string, options?: Partial<ToastOptions>) => string;
export declare const loading: (message?: string, options?: Partial<ToastOptions>) => string;
export declare const promise: <T>(promise: Promise<T>, messages: {
    loading?: string;
    success?: string | ((result: T) => string);
    error?: string | ((error: Error) => string);
}, options?: Partial<ToastOptions>) => Promise<T>;
export declare const showProgress: (message: string, initialProgress?: number, options?: Partial<ToastOptions>) => string;
export declare const updateProgress: (id: string, progress: number, message?: string) => boolean;
export { TurboToastView };
declare const _default: {
    show: (options: ToastOptions | string) => string;
    hide: (id?: string) => void;
    hideAll: () => void;
    update: (id: string, options: Partial<ToastOptions>) => boolean;
    configure: (options: ToastConfig) => void;
    destroy: () => void;
    isActive: (id: string) => boolean;
    getActiveToasts: () => import("./types").QueuedToast[];
    getQueuedToasts: () => import("./types").QueuedToast[];
    success: (message: string, options?: Partial<ToastOptions>) => string;
    error: (message: string, options?: Partial<ToastOptions>) => string;
    warning: (message: string, options?: Partial<ToastOptions>) => string;
    info: (message: string, options?: Partial<ToastOptions>) => string;
    loading: (message?: string, options?: Partial<ToastOptions>) => string;
    promise: <T>(promise: Promise<T>, messages: {
        loading?: string;
        success?: string | ((result: T) => string);
        error?: string | ((error: Error) => string);
    }, options?: Partial<ToastOptions>) => Promise<T>;
    showProgress: (message: string, initialProgress?: number, options?: Partial<ToastOptions>) => string;
    updateProgress: (id: string, progress: number, message?: string) => boolean;
    getQueueStats: () => import("./types").QueueStats;
    clearGroup: (group: string) => import("./types").QueuedToast[];
    findByGroup: (group: string) => import("./types").QueuedToast[];
    updateToast: (id: string, updates: Partial<ToastOptions>) => boolean;
    reorderToast: (id: string, newPriority: number) => boolean;
    pauseQueue: () => void;
    resumeQueue: () => void;
    getToastPosition: (id: string) => number | undefined;
};
export default _default;
export { toastAnalytics, ConsoleAnalyticsProvider, CustomAnalyticsProvider, type ToastAnalyticsEvent, type AnalyticsProvider, } from './analytics';
export * from './types';
//# sourceMappingURL=index.d.ts.map